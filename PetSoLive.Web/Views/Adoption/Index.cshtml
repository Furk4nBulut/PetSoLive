@using Microsoft.Extensions.Localization
@using PetSoLive.Web.Controllers
@inject IStringLocalizer<AdoptionController> Localizer
@model IEnumerable<object>

@{
    ViewData["Title"] = Localizer["AvailablePetsTitle"];
}

<div class="adoption-container">
    <!-- Enhanced Tab Navigation -->
    <div class="tab-navigation">
        <button class="tab-button active" data-tab="all">
            <i class="fas fa-th-large"></i> @Localizer["AllPets"]
        </button>
        <button class="tab-button" data-tab="available">
            <i class="fas fa-home"></i> @Localizer["AvailablePets"]
        </button>
        <button class="tab-button" data-tab="adopted">
            <i class="fas fa-heart"></i> @Localizer["AdoptedPets"]
        </button>
    </div>

    <!-- Enhanced Filter Section -->
    <div class="filter-section">
        <div class="filter-header">
            <h4><i class="fas fa-filter"></i> @Localizer["FilterPets"]</h4>
            <p>@Localizer["FilterDescription"]</p>
        </div>
        
        <div class="filter-controls">
            <div class="filter-group">
                <label for="speciesFilter">
                    <i class="fas fa-paw"></i> @Localizer["Species"]:
                </label>
                <select id="speciesFilter" class="form-control">
                    <option value="">@Localizer["AllSpecies"]</option>
                    <option value="Dog">üêï @Localizer["Dog"]</option>
                    <option value="Cat">üê± @Localizer["Cat"]</option>
                    <option value="Bird">ü¶ú @Localizer["Bird"]</option>
                    <option value="Fish">üê† @Localizer["Fish"]</option>
                    <option value="Rabbit">üê∞ @Localizer["Rabbit"]</option>
                    <option value="Hamster">üêπ @Localizer["Hamster"]</option>
                    <option value="Other">üêæ @Localizer["Other"]</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="breedFilter">
                    <i class="fas fa-tag"></i> @Localizer["Breed"]:
                </label>
                <select id="breedFilter" class="form-control">
                    <option value="">@Localizer["AllBreeds"]</option>
                    <!-- Dog Breeds -->
                    <option value="Golden Retriever" data-species="Dog">Golden Retriever</option>
                    <option value="Labrador" data-species="Dog">Labrador</option>
                    <option value="German Shepherd" data-species="Dog">German Shepherd</option>
                    <option value="Bulldog" data-species="Dog">Bulldog</option>
                    <option value="Poodle" data-species="Dog">Poodle</option>
                    <option value="Beagle" data-species="Dog">Beagle</option>
                    <option value="Rottweiler" data-species="Dog">Rottweiler</option>
                    <option value="Husky" data-species="Dog">Husky</option>
                    <!-- Cat Breeds -->
                    <option value="Persian" data-species="Cat">Persian</option>
                    <option value="Siamese" data-species="Cat">Siamese</option>
                    <option value="Maine Coon" data-species="Cat">Maine Coon</option>
                    <option value="British Shorthair" data-species="Cat">British Shorthair</option>
                    <option value="Ragdoll" data-species="Cat">Ragdoll</option>
                    <option value="Bengal" data-species="Cat">Bengal</option>
                    <option value="Sphynx" data-species="Cat">Sphynx</option>
                    <!-- Other Breeds -->
                    <option value="Mixed" data-species="All">Mixed</option>
                    <option value="Unknown" data-species="All">Unknown</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="ageFilter">
                    <i class="fas fa-birthday-cake"></i> @Localizer["Age"]:
                </label>
                <select id="ageFilter" class="form-control">
                    <option value="">@Localizer["AllAges"]</option>
                    <option value="Young">@Localizer["Young"]</option>
                    <option value="Adult">@Localizer["Adult"]</option>
                    <option value="Senior">@Localizer["Senior"]</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="ageRangeFilter">
                    <i class="fas fa-calendar-alt"></i> @Localizer["AgeRange"]:
                </label>
                <div class="range-inputs">
                    <input type="number" id="minAge" class="form-control" placeholder="@Localizer["MinAge"]" min="0" max="20">
                    <span class="range-separator">-</span>
                    <input type="number" id="maxAge" class="form-control" placeholder="@Localizer["MaxAge"]" min="0" max="20">
                </div>
            </div>
            
            <div class="filter-group">
                <label for="genderFilter">
                    <i class="fas fa-venus-mars"></i> @Localizer["Gender"]:
                </label>
                <select id="genderFilter" class="form-control">
                    <option value="">@Localizer["AllGenders"]</option>
                    <option value="Male">@Localizer["Male"]</option>
                    <option value="Female">@Localizer["Female"]</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="neuteredFilter">
                    <i class="fas fa-heart"></i> @Localizer["NeuteredStatus"]:
                </label>
                <select id="neuteredFilter" class="form-control">
                    <option value="">@Localizer["AllNeuteredStatus"]</option>
                    <option value="Neutered">@Localizer["Neutered"]</option>
                    <option value="NotNeutered">@Localizer["NotNeutered"]</option>
                    <option value="Unknown">@Localizer["Unknown"]</option>
                </select>
            </div>
        </div>
        
        <div class="search-box">
            <input type="text" id="searchInput" class="form-control" placeholder="@Localizer["SearchPets"]" />
        </div>
        
        <div class="filter-actions">
            <button type="button" id="clearFilters" class="btn btn-outline-secondary btn-sm">
                <i class="fas fa-times"></i> @Localizer["ClearFilters"]
            </button>
            <span class="filter-results" id="filterResults"></span>
        </div>
    </div>

    <!-- Pets Grid -->
    <div class="pets-grid" id="petsGrid">
        @{
            var availablePets = new List<object>();
            var adoptedPets = new List<object>();
            
            foreach (dynamic petData in Model)
            {
                var pet = petData.Pet as PetSoLive.Core.Entities.Pet;
                var isAdopted = petData.IsAdopted as bool?;
                
                if (isAdopted == true)
                {
                    adoptedPets.Add(petData);
                }
                else
                {
                    availablePets.Add(petData);
                }
            }
        }
        
        <!-- Available Pets Section -->
        @if (availablePets.Any())
        {
            <div class="section-header available-section" data-tab="available">
                <h3>üè† @Localizer["AvailablePetsSection"]</h3>
                <p>@Localizer["AvailablePetsDescription"]</p>
            </div>
            
            @foreach (dynamic petData in availablePets)
            {
                var pet = petData.Pet as PetSoLive.Core.Entities.Pet;
                var isAdopted = petData.IsAdopted as bool?;
                
                <div class="pet-card @(isAdopted == true ? "adopted" : "available")" 
                     data-species="@pet.Species" data-age="@pet.Age" data-gender="@pet.Gender" data-adopted="@isAdopted"
                     data-breed="@pet.Breed" data-neutered="@GetNeuteredStatus(pet)"
                     data-tab="available">
                    
                    <!-- Adoption Status Badge -->
                    <div class="adoption-status-badge">
                        @if (isAdopted == true)
                        {
                            <span class="badge adopted-badge">
                                <i class="fas fa-heart"></i> @Localizer["Adopted"]
                            </span>
                        }
                        else
                        {
                            <span class="badge available-badge">
                                <i class="fas fa-home"></i> @Localizer["Available"]
                            </span>
                        }
                    </div>
                    
                    <div class="pet-image-container">
                        <img src="@(string.IsNullOrEmpty(pet.ImageUrl) ? "/lib/bg.png" : pet.ImageUrl)" 
                             alt="@pet.Name" 
                             class="pet-image"
                             onclick="window.location.href='@Url.Action("Details", "Pet", new { id = pet.Id })'" />
                    </div>
                    
                    <div class="pet-info">
                        <div class="pet-header">
                            <h3 class="pet-name">@pet.Name</h3>
                            <span class="pet-species">@GetSpeciesEmoji(pet.Species) @Localizer[pet.Species]</span>
                        </div>
                        
                        <div class="pet-details">
                            <div class="detail-item">
                                <span class="detail-label">@Localizer["Age"]:</span>
                                <span class="detail-value">@pet.Age @Localizer["Years"]</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">@Localizer["Gender"]:</span>
                                <span class="detail-value">@Localizer[pet.Gender]</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">@Localizer["Breed"]:</span>
                                <span class="detail-value">@pet.Breed</span>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(pet.Description))
                        {
                            <div class="pet-description">
                                <p>@(pet.Description.Length > 100 ? pet.Description.Substring(0, 100) + "..." : pet.Description)</p>
                            </div>
                        }
                    </div>
                    
                    <div class="pet-actions">
                        <a href="@Url.Action("Details", "Pet", new { id = pet.Id })" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-eye"></i> @Localizer["ViewDetails"]
                        </a>
                        @if (isAdopted != true)
                        {
                            <a href="@Url.Action("Adopt", "Adoption", new { petId = pet.Id })" class="btn btn-primary btn-sm">
                                <i class="fas fa-heart"></i> @Localizer["Adopt"]
                            </a>
                        }
                        else
                        {
                            <button class="btn btn-secondary btn-sm" disabled>
                                <i class="fas fa-check"></i> @Localizer["AlreadyAdopted"]
                            </button>
                        }
                    </div>
                </div>
            }
        }
        
        <!-- Adopted Pets Section -->
        @if (adoptedPets.Any())
        {
            <div class="section-header adopted-section" data-tab="adopted">
                <h3>‚ù§Ô∏è @Localizer["AdoptedPetsSection"]</h3>
                <p>@Localizer["AdoptedPetsDescription"]</p>
            </div>
            
            @foreach (dynamic petData in adoptedPets)
            {
                var pet = petData.Pet as PetSoLive.Core.Entities.Pet;
                var isAdopted = petData.IsAdopted as bool?;
                
                <div class="pet-card @(isAdopted == true ? "adopted" : "available")" 
                     data-species="@pet.Species" data-age="@pet.Age" data-gender="@pet.Gender" data-adopted="@isAdopted"
                     data-breed="@pet.Breed" data-neutered="@GetNeuteredStatus(pet)"
                     data-tab="adopted">
                    
                    <!-- Adoption Status Badge -->
                    <div class="adoption-status-badge">
                        @if (isAdopted == true)
                        {
                            <span class="badge adopted-badge">
                                <i class="fas fa-heart"></i> @Localizer["Adopted"]
                            </span>
                        }
                        else
                        {
                            <span class="badge available-badge">
                                <i class="fas fa-home"></i> @Localizer["Available"]
                            </span>
                        }
                    </div>
                    
                    <div class="pet-image-container">
                        <img src="@(string.IsNullOrEmpty(pet.ImageUrl) ? "/lib/bg.png" : pet.ImageUrl)" 
                             alt="@pet.Name" 
                             class="pet-image"
                             onclick="window.location.href='@Url.Action("Details", "Pet", new { id = pet.Id })'" />
                    </div>
                    
                    <div class="pet-info">
                        <div class="pet-header">
                            <h3 class="pet-name">@pet.Name</h3>
                            <span class="pet-species">@GetSpeciesEmoji(pet.Species) @Localizer[pet.Species]</span>
                        </div>
                        
                        <div class="pet-details">
                            <div class="detail-item">
                                <span class="detail-label">@Localizer["Age"]:</span>
                                <span class="detail-value">@pet.Age @Localizer["Years"]</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">@Localizer["Gender"]:</span>
                                <span class="detail-value">@Localizer[pet.Gender]</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">@Localizer["Breed"]:</span>
                                <span class="detail-value">@pet.Breed</span>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(pet.Description))
                        {
                            <div class="pet-description">
                                <p>@(pet.Description.Length > 100 ? pet.Description.Substring(0, 100) + "..." : pet.Description)</p>
                            </div>
                        }
                    </div>
                    
                    <div class="pet-actions">
                        <a href="@Url.Action("Details", "Pet", new { id = pet.Id })" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-eye"></i> @Localizer["ViewDetails"]
                        </a>
                        @if (isAdopted != true)
                        {
                            <a href="@Url.Action("Adopt", "Adoption", new { petId = pet.Id })" class="btn btn-primary btn-sm">
                                <i class="fas fa-heart"></i> @Localizer["Adopt"]
                            </a>
                        }
                        else
                        {
                            <button class="btn btn-secondary btn-sm" disabled>
                                <i class="fas fa-check"></i> @Localizer["AlreadyAdopted"]
                            </button>
                        }
                    </div>
                </div>
            }
        }
    </div>
    
    @if (!Model.Any())
    {
        <div class="no-pets-message">
            <p>@Localizer["NoPetsAvailable"]</p>
        </div>
    }
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const speciesFilter = document.getElementById('speciesFilter');
    const breedFilter = document.getElementById('breedFilter');
    const ageFilter = document.getElementById('ageFilter');
    const ageRangeFilter = document.getElementById('ageRangeFilter');
    const minAgeInput = document.getElementById('minAge');
    const maxAgeInput = document.getElementById('maxAge');
    const genderFilter = document.getElementById('genderFilter');
    const neuteredFilter = document.getElementById('neuteredFilter');
    const petsGrid = document.getElementById('petsGrid');
    const petCards = document.querySelectorAll('.pet-card');
    const sectionHeaders = document.querySelectorAll('.section-header');
    const tabButtons = document.querySelectorAll('.tab-button');
    const clearFiltersBtn = document.getElementById('clearFilters');
    const filterResults = document.getElementById('filterResults');
    
    let currentTab = 'all';

    function switchTab(tabName) {
        currentTab = tabName;
        
        // Update tab button states
        tabButtons.forEach(button => {
            if (button.dataset.tab === tabName) {
                button.classList.add('active');
            } else {
                button.classList.remove('active');
            }
        });
        
        // Show/hide section headers and cards based on tab
        sectionHeaders.forEach(header => {
            if (tabName === 'all' || header.dataset.tab === tabName) {
                header.style.display = 'block';
            } else {
                header.style.display = 'none';
            }
        });
        
        petCards.forEach(card => {
            if (tabName === 'all' || card.dataset.tab === tabName) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
        
        // Reapply filters after tab switch
        filterPets();
    }

    function filterPets() {
        const searchTerm = searchInput.value.toLowerCase();
        const selectedSpecies = speciesFilter.value;
        const selectedBreed = breedFilter.value;
        const selectedAge = ageFilter.value;
        const selectedAgeRange = { min: parseInt(minAgeInput.value) || 0, max: parseInt(maxAgeInput.value) || 20 };
        const selectedGender = genderFilter.value;
        const selectedNeutered = neuteredFilter.value;

        let visibleCount = 0;

        petCards.forEach(card => {
            // Skip cards that don't match current tab
            if (currentTab !== 'all' && card.dataset.tab !== currentTab) {
                card.style.display = 'none';
                return;
            }
            
            const petName = card.querySelector('.pet-name').textContent.toLowerCase();
            const petSpecies = card.dataset.species;
            const petAge = parseInt(card.dataset.age);
            const petGender = card.dataset.gender;
            const petDescription = card.querySelector('.pet-description p')?.textContent.toLowerCase() || '';

            const matchesSearch = petName.includes(searchTerm) || petDescription.includes(searchTerm);
            const matchesSpecies = !selectedSpecies || petSpecies === selectedSpecies;
            const matchesBreed = !selectedBreed || card.dataset.breed === selectedBreed;
            const matchesAge = !selectedAge || getAgeCategory(petAge) === selectedAge;
            const matchesAgeRange = petAge >= selectedAgeRange.min && petAge <= selectedAgeRange.max;
            const matchesGender = !selectedGender || petGender === selectedGender;
            const matchesNeutered = !selectedNeutered || card.dataset.neutered === selectedNeutered;

            if (matchesSearch && matchesSpecies && matchesBreed && matchesAge && matchesAgeRange && matchesGender && matchesNeutered) {
                card.style.display = 'block';
                visibleCount++;
            } else {
                card.style.display = 'none';
            }
        });

        // Update filter results
        updateFilterResults(visibleCount);
    }

    function updateFilterResults(visibleCount) {
        const totalCount = petCards.length;
        if (visibleCount === totalCount) {
            filterResults.textContent = '';
        } else {
            filterResults.textContent = `${visibleCount} of ${totalCount} pets shown`;
        }
    }

    function clearAllFilters() {
        searchInput.value = '';
        speciesFilter.value = '';
        breedFilter.value = '';
        ageFilter.value = '';
        minAgeInput.value = '';
        maxAgeInput.value = '';
        genderFilter.value = '';
        neuteredFilter.value = '';
        filterPets();
    }

    function getAgeCategory(age) {
        if (age <= 2) return 'Young';
        if (age <= 7) return 'Adult';
        return 'Senior';
    }

    // Tab button event listeners
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            switchTab(this.dataset.tab);
        });
    });

    // Filter event listeners
    searchInput.addEventListener('input', filterPets);
    speciesFilter.addEventListener('change', filterPets);
    breedFilter.addEventListener('change', filterPets);
    ageFilter.addEventListener('change', filterPets);
    minAgeInput.addEventListener('input', filterPets);
    maxAgeInput.addEventListener('input', filterPets);
    genderFilter.addEventListener('change', filterPets);
    neuteredFilter.addEventListener('change', filterPets);
    
    // Species filter change handler for breed filtering
    speciesFilter.addEventListener('change', function() {
        const selectedSpecies = this.value;
        const breedOptions = breedFilter.querySelectorAll('option');
        
        breedOptions.forEach(option => {
            if (option.value === '') {
                option.style.display = 'block'; // Always show "All Breeds"
                return;
            }
            
            const optionSpecies = option.dataset.species;
            if (selectedSpecies === '' || optionSpecies === 'All' || optionSpecies === selectedSpecies) {
                option.style.display = 'block';
            } else {
                option.style.display = 'none';
            }
        });
        
        // Reset breed filter when species changes
        breedFilter.value = '';
        filterPets();
    });
    
    // Clear filters button
    clearFiltersBtn.addEventListener('click', clearAllFilters);
    
    // Initial filter
    filterPets();
});
</script>

@functions {
    private string GetSpeciesEmoji(string species)
    {
        return species switch
        {
            "Dog" => "üêï",
            "Cat" => "üê±",
            "Bird" => "ü¶ú",
            "Fish" => "üê†",
            "Rabbit" => "üê∞",
            "Hamster" => "üêπ",
            _ => "üêæ"
        };
    }

    private string GetNeuteredStatus(PetSoLive.Core.Entities.Pet pet)
    {
        return pet.IsNeutered == true ? "Neutered" : "NotNeutered";
    }
}
